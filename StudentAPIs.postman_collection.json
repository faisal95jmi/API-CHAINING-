{
	"info": {
		"_postman_id": "2862b083-9d97-4ffa-b8ef-6fc842710de0",
		"name": "StudentAPIs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22982094"
	},
	"item": [
		{
			"name": "Get Single Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							" pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", () => { \r",
							"pm.expect(pm.response.responseTime).to.be.below(100); \r",
							"})\r",
							"\r",
							" \r",
							"const jsonData = pm.response.json(); \r",
							"pm.test(\"Test data type of the response\", () => { \r",
							"  pm.expect(jsonData).to.be.an(\"object\"); \r",
							"  pm.expect(jsonData.name).to.be.a(\"string\"); \r",
							"  pm.expect(jsonData.id).to.be.a(\"STRING\"); \r",
							"  pm.expect(jsonData.courses).to.be.an(\"array\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Test array properties\", () => { \r",
							"   //courses includes \"Java\" \r",
							"  pm.expect(jsonData.courses).to.include(\"C\"); \r",
							"    //courses array must include all listed \r",
							"  pm.expect(jsonData.courses) \r",
							"    .to.have.members([\"C\", \"C++\"]); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Students Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							" pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", () => { \r",
							"pm.expect(pm.response.responseTime).to.be.below(100); \r",
							"})\r",
							"\r",
							" \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create New Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", () => {\r",
							" pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", () => { \r",
							"pm.expect(pm.response.responseTime).to.be.below(100); \r",
							"})\r",
							"\r",
							" \r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{ \"id\" : \"6\",\r\n    \"name\": \"Scott\",\r\n    \"location\": \"France\",\r\n    \"phone\": \"123456\",\r\n    \"courses\": [\r\n        \"C\",\r\n        \"C++\"\r\n    ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							" pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", () => { \r",
							"pm.expect(pm.response.responseTime).to.be.below(100); \r",
							"})\r",
							"\r",
							" \r",
							"const jsonData = pm.response.json(); \r",
							"pm.test(\"Test data type of the response\", () => { \r",
							"  pm.expect(jsonData).to.be.an(\"object\"); \r",
							"  pm.expect(jsonData.name).to.be.a(\"string\"); \r",
							"  pm.expect(jsonData.id).to.be.a(\"STRING\"); \r",
							"  pm.expect(jsonData.courses).to.be.an(\"array\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Test array properties\", () => { \r",
							"   //courses includes \"Java\" \r",
							"  pm.expect(jsonData.courses).to.include(\"C\"); \r",
							"    //courses array must include all listed \r",
							"  pm.expect(jsonData.courses) \r",
							"    .to.have.members([\"C#\", \"C\"]); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{    \"id\" : \"1\",\r\n    \"name\": \"Sco\",\r\n    \"location\": \"Germany\",\r\n    \"phone\": \"654321\",\r\n    \"courses\": [\r\n        \"C#\",\r\n        \"C\"\r\n    ]\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/students/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							" pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", () => {\r",
							"pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", () => { \r",
							"pm.expect(pm.response.responseTime).to.be.below(100); \r",
							"})\r",
							"\r",
							" \r",
							"const jsonData = pm.response.json(); \r",
							"pm.test(\"Test data type of the response\", () => { \r",
							"  pm.expect(jsonData).to.be.an(\"object\"); \r",
							"  pm.expect(jsonData.name).to.be.a(\"string\"); \r",
							"  pm.expect(jsonData.id).to.be.a(\"STRING\"); \r",
							"  pm.expect(jsonData.courses).to.be.an(\"array\"); \r",
							"});\r",
							"\r",
							"pm.test(\"Test array properties\", () => { \r",
							"   //courses includes \"Java\" \r",
							"  pm.expect(jsonData.courses).to.include(\"C\"); \r",
							"    //courses array must include all listed \r",
							"  pm.expect(jsonData.courses) \r",
							"    .to.have.members([\"C\", \"C++\"]); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/students/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"students",
						"4"
					]
				}
			},
			"response": []
		}
	]
}